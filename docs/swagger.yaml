basePath: /api/v1
definitions:
  github_com_heroticket_internal_user.User:
    properties:
      created_at:
        type: string
      did:
        type: string
      is_admin:
        type: boolean
      name:
        type: string
      tba_address:
        type: string
      updated_at:
        type: string
      wallet_address:
        type: string
    type: object
  notice.Notice:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  notice.Pagination:
    properties:
      current_page:
        type: integer
      end:
        type: integer
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      pages:
        type: integer
      start:
        type: integer
      total:
        type: integer
    type: object
  protocol.AuthorizationRequestMessage:
    properties:
      body:
        $ref: '#/definitions/protocol.AuthorizationRequestMessageBody'
      from:
        type: string
      id:
        type: string
      thid:
        type: string
      to:
        type: string
      typ:
        type: string
      type:
        type: string
    type: object
  protocol.AuthorizationRequestMessageBody:
    properties:
      callbackUrl:
        type: string
      did_doc:
        items:
          type: integer
        type: array
      message:
        type: string
      reason:
        type: string
      scope:
        items:
          $ref: '#/definitions/protocol.ZeroKnowledgeProofRequest'
        type: array
    type: object
  protocol.ZeroKnowledgeProofRequest:
    properties:
      circuitId:
        type: string
      id:
        description: unique request id
        type: integer
      optional:
        type: boolean
      query:
        additionalProperties: true
        type: object
    type: object
  rest.CommonResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  rest.NoticesResponse:
    properties:
      notices:
        items:
          $ref: '#/definitions/notice.Notice'
        type: array
      pagination:
        $ref: '#/definitions/notice.Pagination'
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is Hero Ticket API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hero Ticket API
  version: "1.0"
paths:
  /notices:
    get:
      description: Get notices
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.NoticesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Get notices
      tags:
      - notices
    post:
      description: Create notice
      parameters:
      - description: title
        in: formData
        name: title
        required: true
        type: string
      - description: content
        in: formData
        name: content
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Create notice
      tags:
      - notices
  /notices/{id}:
    get:
      description: Get notice
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/notice.Notice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Get notice
      tags:
      - notices
    put:
      description: Update notice
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: title
        in: formData
        name: title
        required: true
        type: string
      - description: content
        in: formData
        name: content
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Update notice
      tags:
      - notices
  /users/create-tba:
    post:
      responses: {}
  /users/issued-tickets:
    get:
      responses: {}
  /users/login-callback:
    post:
      consumes:
      - text/plain
      description: processes login callback
      parameters:
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: processes login callback
      tags:
      - users
  /users/login-qr:
    get:
      description: returns login qr code
      parameters:
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/protocol.AuthorizationRequestMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns login qr code
      tags:
      - users
  /users/logout:
    post:
      description: logs out user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: logs out user
      tags:
      - users
  /users/profile:
    get:
      description: returns user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_heroticket_internal_user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns user profile
      tags:
      - users
  /users/purchased-tickets:
    get:
      responses: {}
  /users/refresh-token:
    post:
      description: refreshes token pair
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: refreshes token pair
      tags:
      - users
swagger: "2.0"
