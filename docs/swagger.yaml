definitions:
  did.CreateClaimResponse:
    properties:
      id:
        type: string
    type: object
  github_com_heroticket_internal_service_user.User:
    properties:
      accountAddress:
        type: string
      avatar:
        type: string
      banner:
        type: string
      bio:
        type: string
      createdAt:
        type: integer
      id:
        type: string
      isAdmin:
        type: boolean
      name:
        type: string
      tbaAddress:
        type: string
      tbaTokenBalance:
        type: string
      updatedAt:
        type: integer
    type: object
  jwt.TokenPair:
    properties:
      accessToken:
        type: string
      accessTokenExpiry:
        $ref: '#/definitions/time.Duration'
      refreshToken:
        type: string
      refreshTokenExpiry:
        $ref: '#/definitions/time.Duration'
    type: object
  notice.Notice:
    properties:
      content:
        type: string
      createdAt:
        type: integer
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: integer
    type: object
  notice.Notices:
    properties:
      items:
        items:
          $ref: '#/definitions/notice.Notice'
        type: array
      pagination:
        $ref: '#/definitions/notice.Pagination'
    type: object
  notice.Pagination:
    properties:
      currentPage:
        type: integer
      end:
        type: integer
      hasNext:
        type: boolean
      hasPrev:
        type: boolean
      limit:
        type: integer
      pages:
        type: integer
      start:
        type: integer
      total:
        type: integer
    type: object
  protocol.AuthorizationRequestMessage:
    properties:
      body:
        $ref: '#/definitions/protocol.AuthorizationRequestMessageBody'
      from:
        type: string
      id:
        type: string
      thid:
        type: string
      to:
        type: string
      typ:
        type: string
      type:
        type: string
    type: object
  protocol.AuthorizationRequestMessageBody:
    properties:
      callbackUrl:
        type: string
      did_doc:
        items:
          type: integer
        type: array
      message:
        type: string
      reason:
        type: string
      scope:
        items:
          $ref: '#/definitions/protocol.ZeroKnowledgeProofRequest'
        type: array
    type: object
  protocol.ZeroKnowledgeProofRequest:
    properties:
      circuitId:
        type: string
      id:
        description: unique request id
        type: integer
      optional:
        type: boolean
      query:
        additionalProperties: true
        type: object
    type: object
  rest.CommonResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
  ticket.TicketCollection:
    properties:
      bannerUrl:
        type: string
      contractAddress:
        type: string
      createdAt:
        type: integer
      date:
        type: string
      description:
        type: string
      ethPrice:
        type: string
      id:
        type: string
      issuerAddress:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: string
      remaining:
        type: string
      saleEndAt:
        type: integer
      saleStartAt:
        type: integer
      symbol:
        type: string
      ticketUrl:
        type: string
      tokenPrice:
        type: string
      totalSupply:
        type: string
      updatedAt:
        type: integer
    type: object
  ticket.TicketCollectionDetail:
    properties:
      bannerUrl:
        type: string
      contractAddress:
        type: string
      createdAt:
        type: integer
      date:
        type: string
      description:
        type: string
      ethPrice:
        type: string
      id:
        type: string
      issuerAddress:
        type: string
      location:
        type: string
      name:
        type: string
      organizer:
        type: string
      remaining:
        type: string
      saleEndAt:
        type: integer
      saleStartAt:
        type: integer
      symbol:
        type: string
      ticketUrl:
        type: string
      tokenPrice:
        type: string
      totalSupply:
        type: string
      updatedAt:
        type: integer
      userHasTicket:
        type: boolean
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    - 1
    - 1000
    - 1000000
    - 1000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
host: api.heroticket.xyz
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Hero Ticket DApp
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Hero Ticket API
  version: "1.0"
paths:
  /favicon.ico:
    get:
      consumes:
      - text/plain
      description: returns favicon
      produces:
      - text/plain
      responses:
        "200":
          description: favicon.ico
          schema:
            type: file
      summary: Get favicon
      tags:
      - common
  /status:
    get:
      consumes:
      - text/plain
      description: returns status
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get status
      tags:
      - common
  /v1/claims/{contractAddress}:
    get:
      consumes:
      - application/json
      description: returns claim qr
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: returns claim qr
      tags:
      - claims
    post:
      consumes:
      - application/json
      description: requests claim
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/did.CreateClaimResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: requests claim
      tags:
      - claims
  /v1/notices:
    get:
      consumes:
      - application/json
      description: returns notices paginated
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/notice.Notices'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Get notices
      tags:
      - notices
  /v1/notices/{id}:
    get:
      consumes:
      - application/json
      description: returns notice by id
      parameters:
      - description: notice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/notice.Notice'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: Get notice
      tags:
      - notices
  /v1/profile/{name}:
    get:
      consumes:
      - application/json
      description: returns user profile
      parameters:
      - description: user name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns user profile
      tags:
      - profile
  /v1/tickets:
    get:
      consumes:
      - application/json
      description: returns tickets
      parameters:
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ticket.TicketCollection'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns tickets
      tags:
      - tickets
  /v1/tickets/{contractAddress}:
    get:
      consumes:
      - application/json
      description: returns ticket
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/ticket.TicketCollectionDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns ticket
      tags:
      - tickets
  /v1/tickets/{contractAddress}/token-purchase-callback:
    post:
      consumes:
      - application/json
      description: token purchase callback
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: account address
        in: query
        name: accountAddress
        required: true
        type: string
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      - description: token
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: token purchase callback
      tags:
      - tickets
  /v1/tickets/{contractAddress}/token-purchase-qr:
    get:
      consumes:
      - application/json
      description: returns token purchase authorization qr code
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/protocol.AuthorizationRequestMessage'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: returns token purchase authorization qr code
      tags:
      - tickets
  /v1/tickets/{contractAddress}/verify-qr:
    get:
      consumes:
      - application/json
      description: returns verify authorization qr code
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/protocol.AuthorizationRequestMessage'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: returns verify authorization qr code
      tags:
      - tickets
  /v1/tickets/{contractAddress}/whitelist-callback:
    post:
      consumes:
      - application/json
      description: whitelist callback
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: account address
        in: query
        name: accountAddress
        required: true
        type: string
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      - description: token
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: whitelist callback
      tags:
      - tickets
  /v1/tickets/{contractAddress}/whitelist-qr:
    get:
      consumes:
      - application/json
      description: returns purchase authorization qr code
      parameters:
      - description: contract address
        in: path
        name: contractAddress
        required: true
        type: string
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/protocol.AuthorizationRequestMessage'
              type: object
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: returns purchase authorization qr code
      tags:
      - tickets
  /v1/tickets/create:
    post:
      consumes:
      - application/json
      description: creates ticket
      parameters:
      - description: ticket name
        in: formData
        name: name
        required: true
        type: string
      - description: ticket symbol
        in: formData
        name: symbol
        required: true
        type: string
      - description: ticket description
        in: formData
        name: description
        required: true
        type: string
      - description: ticket organizer
        in: formData
        name: organizer
        required: true
        type: string
      - description: ticket location
        in: formData
        name: location
        required: true
        type: string
      - description: 'ticket usage date '
        in: formData
        name: date
        required: true
        type: string
      - description: ticket banner image file
        in: formData
        name: bannerImage
        required: true
        type: file
      - description: ticket uri (ipfs hash)
        in: formData
        name: ticketUri
        required: true
        type: string
      - description: ticket eth price (min 1 gwei = 1e9)
        in: formData
        name: ethPrice
        required: true
        type: integer
      - description: ticket token price (min 1 token)
        in: formData
        name: tokenPrice
        required: true
        type: integer
      - description: ticket total supply (min 1 ticket)
        in: formData
        name: totalSupply
        required: true
        type: integer
      - description: ticket sale duration in days (min 1 day)
        in: formData
        name: saleDuration
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/ticket.TicketCollection'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: creates ticket
      tags:
      - tickets
  /v1/tickets/verify-callback:
    post:
      consumes:
      - application/json
      description: verify callback
      parameters:
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      - description: token
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: verify callback
      tags:
      - tickets
  /v1/users/info:
    get:
      consumes:
      - application/json
      description: returns user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_heroticket_internal_service_user.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: returns user info
      tags:
      - users
  /v1/users/login-callback:
    post:
      consumes:
      - text/plain
      description: processes login callback
      parameters:
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      - description: token
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: processes login callback
      tags:
      - users
  /v1/users/login-qr:
    get:
      consumes:
      - application/json
      description: returns login qr code
      parameters:
      - description: session id
        in: query
        name: sessionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/protocol.AuthorizationRequestMessage'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: returns login qr code
      tags:
      - users
  /v1/users/refresh:
    post:
      consumes:
      - text/plain
      description: refreshes token pair
      parameters:
      - description: refresh token
        in: body
        name: refreshToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/jwt.TokenPair'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      summary: refreshes token pair
      tags:
      - users
  /v1/users/register/{accountAddress}:
    post:
      description: registers user
      parameters:
      - description: account address
        in: path
        name: accountAddress
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  $ref: '#/definitions/github_com_heroticket_internal_service_user.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: registers user
      tags:
      - users
  /v1/users/update-token-balance:
    post:
      description: updates token balance
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/rest.CommonResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.CommonResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.CommonResponse'
      security:
      - BearerAuth: []
      summary: updates token balance
      tags:
      - users
  /ws:
    get:
      description: returns websocket connection
      responses: {}
      summary: Serve websocket
      tags:
      - websocket
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
